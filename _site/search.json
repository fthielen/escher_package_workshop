[
  {
    "objectID": "preclass.html",
    "href": "preclass.html",
    "title": "Things you might want to know or have",
    "section": "",
    "text": "Here we explain are some things to have ready before the first class. Please make sure you have all items ready on the checklist\n\nLooking forward to the day\nR and RStudio installed\nMaking sure git works on your computer (i.e., it is installed and you introduced yourself to git)\nGitHub account created and being able to log-in\nGitHub Desktop or another git client installed\n\n\n\n\n\nWhether you need to install git on your computer depends on your operating system.\n\n\nIf you are using a Mac, git is already installed and you are good to go. You can of course double-check by opening the terminal (press command (⌘) + Space, then type ‘terminal’) and typing git --version. If you see a version number, you are all set. If you see an error message, you may need to install git. You can do this by downloading git from https://git-scm.com/.\n\n\n\nIf you are using a Windows computer, you may need to install git. How you do this depends on the rights you have to install software. If you have admin rights, you can download git directly from https://git-scm.com/. In case you are working on a computer managed by the EUR, you can install git via the Software Center.\nOnce you have git installed, you should be able to open a command prompt and type git --version to see the version of git you have installed. If you see a version number, you are good to go.\n\n\n\n\nOnce you have git installed, you should configure it with your name and email address. You can do this by opening a command prompt.\n\nMac users: open the terminal (press command (⌘) + Space, then type ‘terminal’)\nWindows users: open git bash programme (press Windows + S, then type ‘git bash’ and press Enter)\n\nIn the command/shell prompt, type the following commands, replacing Your Name and example@example.com with your name and email address.\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"example@example.com\"\ngit config --global --list\n\nThe last command will show you the configuration settings for git. You should see your name and email address in the list. If you do not see them, you may have made a typo in the previous commands. You can correct this by running the commands again.\n\n\n\n\nYou will need a GitHub account for this course. If you do not already have one, you can create one at GitHub. We recommend using your EUR email address for your GitHub account because this will make it easier to request a GitHub Teachers or Student account later. With such an account, you can create private repositories for free and make use of other features that are not available with a regular GitHub account such as GitHub Copilot.\n\n\n\n\n\n\nNote\n\n\n\nMake sure to use the same email address for your GitHub account and for configuring git locally!\n\n\n\n\n\nYou can interact with git using the command line, but for beginners not used to working in command lines directly, it is often easier to use a graphical user interface (GUI). One popular GUI is GitHub Desktop. You can download GitHub Desktop from https://desktop.github.com/.\nIf you prefer to use another Git client, you are free to do so. Some other popular Git clients are Sourcetree and GitKraken.\nIf you do not or cannot install a git client, you can skip this step, but you then need to configure RStudio to use git. This is a little more complicated but definitely worth sorting out because you can then interact with GitHub directly from RStudio. You can configure this by following the instructions in the Happy Git and GitHub for the useR guidele in Chapter 12."
  },
  {
    "objectID": "preclass.html#making-sure-git-works-on-your-computer",
    "href": "preclass.html#making-sure-git-works-on-your-computer",
    "title": "Things you might want to know or have",
    "section": "",
    "text": "Whether you need to install git on your computer depends on your operating system.\n\n\nIf you are using a Mac, git is already installed and you are good to go. You can of course double-check by opening the terminal (press command (⌘) + Space, then type ‘terminal’) and typing git --version. If you see a version number, you are all set. If you see an error message, you may need to install git. You can do this by downloading git from https://git-scm.com/.\n\n\n\nIf you are using a Windows computer, you may need to install git. How you do this depends on the rights you have to install software. If you have admin rights, you can download git directly from https://git-scm.com/. In case you are working on a computer managed by the EUR, you can install git via the Software Center.\nOnce you have git installed, you should be able to open a command prompt and type git --version to see the version of git you have installed. If you see a version number, you are good to go.\n\n\n\n\nOnce you have git installed, you should configure it with your name and email address. You can do this by opening a command prompt.\n\nMac users: open the terminal (press command (⌘) + Space, then type ‘terminal’)\nWindows users: open git bash programme (press Windows + S, then type ‘git bash’ and press Enter)\n\nIn the command/shell prompt, type the following commands, replacing Your Name and example@example.com with your name and email address.\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"example@example.com\"\ngit config --global --list\n\nThe last command will show you the configuration settings for git. You should see your name and email address in the list. If you do not see them, you may have made a typo in the previous commands. You can correct this by running the commands again."
  },
  {
    "objectID": "preclass.html#create-a-github-account",
    "href": "preclass.html#create-a-github-account",
    "title": "Things you might want to know or have",
    "section": "",
    "text": "You will need a GitHub account for this course. If you do not already have one, you can create one at GitHub. We recommend using your EUR email address for your GitHub account because this will make it easier to request a GitHub Teachers or Student account later. With such an account, you can create private repositories for free and make use of other features that are not available with a regular GitHub account such as GitHub Copilot.\n\n\n\n\n\n\nNote\n\n\n\nMake sure to use the same email address for your GitHub account and for configuring git locally!"
  },
  {
    "objectID": "preclass.html#install-github-desktop-or-another-git-client",
    "href": "preclass.html#install-github-desktop-or-another-git-client",
    "title": "Things you might want to know or have",
    "section": "",
    "text": "You can interact with git using the command line, but for beginners not used to working in command lines directly, it is often easier to use a graphical user interface (GUI). One popular GUI is GitHub Desktop. You can download GitHub Desktop from https://desktop.github.com/.\nIf you prefer to use another Git client, you are free to do so. Some other popular Git clients are Sourcetree and GitKraken.\nIf you do not or cannot install a git client, you can skip this step, but you then need to configure RStudio to use git. This is a little more complicated but definitely worth sorting out because you can then interact with GitHub directly from RStudio. You can configure this by following the instructions in the Happy Git and GitHub for the useR guidele in Chapter 12."
  },
  {
    "objectID": "course_material/starwars/starwars_example.html",
    "href": "course_material/starwars/starwars_example.html",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "This section covers the basics of handling and analysing the starwars dataset from the dplyr package in R. You can use these example functions and dataset to create and use custom functions to explore this dataset for your mini-package."
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#introduction",
    "href": "course_material/starwars/starwars_example.html#introduction",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "This section covers the basics of handling and analysing the starwars dataset from the dplyr package in R. You can use these example functions and dataset to create and use custom functions to explore this dataset for your mini-package."
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#the-star-wars-dataset",
    "href": "course_material/starwars/starwars_example.html#the-star-wars-dataset",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "The Star Wars Dataset",
    "text": "The Star Wars Dataset\n\nIs part of the dplyr package in R.\nIncludes details about characters from the Star Wars universe.\nVariables include: name, height, mass, hair_color, skin_color, eye_color, birth_year, gender, homeworld, species.\nSome variables are lists and need special handling. If you load the my_stawars.csv dataset here, these columns are dropped for easier handling."
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#function-top_starwars",
    "href": "course_material/starwars/starwars_example.html#function-top_starwars",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Function: top_starwars",
    "text": "Function: top_starwars\n\n\n\nPurpose\nReturns a data frame ranked by a user-specified variable. Useful for sorting characters by attributes like height or mass.\n\n\n\n\n\n\nCode\n\n# Define the function\ntop_starwars &lt;- function(variable = \"height\", top = 10) {\n        # Load necessary libraries\n        require(dplyr)\n        \n        # Ensure the dataset is loaded\n        if (!exists(\"starwars\")) {\n                starwars &lt;- dplyr::starwars\n        }\n        \n        # Check if the specified variable exists in the dataframe\n        if (!variable %in% names(starwars)) {\n                stop(\"The specified variable does not exist in the starwars dataset.\")\n        }\n        \n        # Sort the dataframe based on the specified variable and handle missing values\n        ranked_df &lt;- starwars %&gt;% \n                filter(!is.na(variable)) %&gt;%\n                arrange(desc(across(all_of(variable)))) %&gt;%\n                select(name, all_of(variable)) %&gt;% \n                slice_head(n = top)\n        \n        # Return the top n entries\n        return(ranked_df)\n}\n\n# Example usage:\n# top_starwars(\"mass\", 5)"
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#function-plot_relationship",
    "href": "course_material/starwars/starwars_example.html#function-plot_relationship",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Function: plot_relationship",
    "text": "Function: plot_relationship\n\n\n\n\n\nPurpose\nPlots the relationship between two variables in the starwars dataset, showcasing the potential correlations or distributions.\n\n\n\n\nCode\n\n# Define the function\nplot_relationship &lt;- function(x, y) {\n        \n        # Load necessary libraries\n        require(ggplot2)\n        require(dplyr)\n        \n        # Ensure the dataset is loaded\n        if (!exists(\"starwars\")) {\n                starwars &lt;- dplyr::starwars\n        }\n        \n        # Check if the specified variables exist in the dataframe\n        if (!(x %in% names(starwars) && y %in% names(starwars))) {\n                stop(\"One or both of the specified variables do not exist in the starwars dataset.\")\n        }\n        \n        # Create the plot\n        plot &lt;- ggplot(data = starwars, aes(x = !!sym(x), y = !!sym(y))) +\n                geom_point(aes(color = species)) +\n                labs(title = paste(\"Relationship between\", x, \"and\", y),\n                     x = x,\n                     y = y) +\n                theme_minimal(base_family = \"Helvetica\") +\n                theme(plot.background = element_rect(fill = \"black\",\n                                                     colour = \"black\"),\n                      panel.background = element_rect(fill = \"black\"),\n                      text = element_text(colour = \"white\"),\n                      axis.text = element_text(colour = \"white\"),\n                      plot.title = element_text(size = 20, face = \"bold\",\n                                                hjust = 0.5, colour = \"white\"),\n                      legend.position = \"bottom\",\n                      legend.text = element_text(size = 6),  # Smaller legend text\n                      legend.key.size = unit(0.1, \"cm\"))  # Smaller legend keys)\n        \n        # Print the plot\n        print(plot)\n}\n\n# Example usage:\n# plot_relationship(x = \"height\", y = \"mass\")"
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#summary",
    "href": "course_material/starwars/starwars_example.html#summary",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Summary",
    "text": "Summary\nHere you explored the starwars dataset and developed two functions:\n\ntop_starwars: To rank characters based on any numeric attribute.\nplot_relationship: To visualize relationships between two attributes.\n\nFeel free to explore further and modify these functions as needed!",
    "crumbs": [
      "Coding exercises",
      "Star Wars example"
    ]
  },
  {
    "objectID": "timetable.html",
    "href": "timetable.html",
    "title": "Timetable",
    "section": "",
    "text": "Timetable\n\n\n\nTime\nTitle\nLocation\n\n\n\n\n09:30 - 10:00\n☕️ Arrival & Coffee\nOpen space on the 7th floor\n\n\n10:00 - 10:30\n👋 Welcome & Introduction\nJ7-55\n\n\n10:30 - 11:45\n🎤 Keynote by Gianluca Baio\nJ7-55\n\n\n11:45 - 12:30\n🥗 Lunch\nOpen space on the 7th floor\n\n\n12:30 - 14:45\n💻 Coding exercise: build your own package\nJ7-43, J7-45, J7-47\n\n\n14:45 - 16:00\n🧊 Drinks\nOpen space on the 7th floor",
    "crumbs": [
      "Timetable"
    ]
  },
  {
    "objectID": "workshop.html",
    "href": "workshop.html",
    "title": "R package workshop",
    "section": "",
    "text": "Welcome! In this session, you will get your hands dirty with some coding in R. The aim of this session is to empower you with skills so that you are able to build a (basic) R package. In order to achieve that, this tutorial provides a step-by-step guide. The material is inspired by the tutorial published by Brad Duthie (see here), which is part of the Coding Club. We would like to thank Brad and the Coding Club for making his work available open source for reuse.\n\n\n\nDo you want to go fast?\nGo alone!\nDo you want to go far?\nWork together!\n\nThe saying is true, especially with coding. However, the aim of developing a package is for your code to be used by others. Therefore, we really recommend that you work together. In the end, your code is more often read than written, and you had better make sure that your logic is also understood by others. So please, if you have not yet found a partner in crime at this stage, search for a buddy. Let us know if you need help.\nThe saying is true, and especially with coding. However, the aim of developing a package is that your code is used by others. Therefore, we really recommend you to work together. In the end your code is more often read than written and you better make sure that your logic is also understood by others. So please, if you have not found a partner in crime at this stage, search for a buddy. Let’s us know if you need help.\n\n\n\nTo get started with an R packages including documentation, it is best to create a new R project. To do this first open Rstudio. In Rstudio, go to File &gt; New Project...; the box below should show up.\n\n\n\nSelect the option New Directory. The following box should appear.\n\n\n\nSelect the option R Package\n\n\n\n\n\n\n\nThe following box should appear.\n\n\n\n\n\n\nNow give your package a name. This should be one word. In this example, I use eschereventpackage.\nNext, create a directory for building this package. Browse on your computer for a good place for this R package to live. And click on Create Project.\nYou will now find this folder and R project on the location you set the directory. Quite likely, the project did even open in R studio. You will notice this by having the Directory Name in your right top corner of R studio.\n Within the folder, the R project is shown as a file ending with .Rproj . You also see more files and folders generated by the template and an R script called hello.R. We will talk about each of these files in the sections below.\n\n\n\n\n\n\nExtra information\n\n\n\n\n\nThere are also two hidden file, likely called .Rproj.user and .Rbuildignore. You will not see it unless you ask your computer to show it. On a Mac you can see this by going to the folder and click “Command + shift + . (period key)”. The* folder .Rproj.user is not really important; it stores some more meta-data about the package development. The .Rbuildignore file plays a role in specifying which files and directories should be ignored when building the package. We might get back to this later during the development.\n\n\n\n\n\n\nBefore we begin, we need to install the devtools and roxygen2 packages. Devtools includes a comprehensive set of tools essential for package development, and roxygen2 facilitates the creation of documentation. Copy the code below and paste in your console.\n\ninstall.packages(\"devtools\")\ninstall.packages(\"roxygen2\")\n\nYou might need to restart Rstudio after installing the above packages.\n\n\n\nPackages in R are collections of code and data created by members of the R community. They serve a variety of purposes, ranging from comprehensive and widely used statistical libraries to simpler packages containing functions for knock-knock jokes (really, no joke).\nIf you have been using R for any amount of time, you likely have had to install and utilize functions from an R package. In these notes, we will guide you through the fundamentals of creating your own R package. This process will not only be useful if you plan to develop your own code into a package but will also enhance your understanding of the R packages you employ in your research and how they are constructed.\nMany R users are familiar with the (“Comprehensive R Archive Network” CRAN), which is a vast repository hosting over 13,000 published R packages. These packages are made available to the R community and can be installed in RStudio using the install.packages function. However, not every R package needs to be or should be uploaded to CRAN. Packages can also be uploaded to and downloaded from GitHub, or even constructed for personal use—many researchers maintain personal R packages with documented functions they regularly utilize in their research.\nIn this tutorial, we will take you through the steps to write a simple R package, explain how you can upload it to GitHub, and download it from GitHub. We will focus exclusively on package development in RStudio for simplicity and efficiency, although it is also possible to develop packages using the command line\n\n\n\nIn this workshop we guide you through the steps of a very basic R package. After this, you are challenged to continue the development.\nThe R package template you created already came with a basis function. The hello function, which prints Hello, world!. This function, an .r script, lives in the R folder.\n\nClick on this R folder and you will see the hello.R script. We will ignore this script for now.\n\nInstead, we will create our own functions. The first function is to convert temperatures from degrees Fahrenheit to degrees Celsius, while the second function will convert temperatures from degrees Celsius to degrees Fahrenheit. To do so, we have to add an R script. You can click File &gt; New File &gt; R script.\n\nA file called Untitled1 opens. Click on the save button and give the R script a name.\n\n\n\nGive your R script a name, select the R folder as the location for the file and click Save. This R folder is the folder where you will store actual R scripts with the coded functions.\n\n\n\nIn your R repository environment you should now see the file within the R folder.\n\nWithin this folder you can save as many R scripts, .R files, as you like. And each of these .R. files can have as any functions you want. You could, for example, give each function its own file, but for large projects, you might like to group similar functions in the same .R file.\nIn our R package, we will write both functions in the same file called convert_temperature_function.R. Paste the code from below in the file and click save.\n\nconvert_Fahrenheid_to_Celsius &lt;- function(F_temp){\n    C_temp &lt;- (F_temp - 32) * 5/9;\n    return(C_temp);\n}\n\nconvert_Celsius_to_Fahrenheid &lt;- function(C_temp){\n    F_temp &lt;- (C_temp * 9/5) + 32;\n    return(F_temp);\n}\n\n\n\nCoding conventions in R are essential for maintaining readable, efficient, and consistent code across projects. One well-known standard is the Google’s R Style Guide, which emphasizes clarity and simplicity with rules on naming conventions, syntax, and data structure usage. Similarly, the Tidyverse style guide, used primarily for packages within the Tidyverse collection, focuses on making R code easy to write, read, and maintain, highlighting functional programming and data manipulation tasks. Another example is the Decision Analysis in R for Technologies in Health, DARTH framework, which provides guidelines for naming conventions of health economic models.\nOverall, all these guides aim to facilitate the sharing and readability of code. This is key when building a package which will be used by others. Therefore, we like to stress to use good coding practices along the way.\n\n\n\n\nNext, we will focus on the DESCRIPTION file that came with the template.\n As you see in the image, this file is in the main directory. It is a plain text document without any file extension and will contain metadata about the R package.\nThe example in the template looks comparable to this.\n As you see, there are many placeholder with general text. Please update this according, especially the title, authors, description.\nAt this state, we could call the current code a package. We could load it using the code below after first making sure we activated devtools.\n\nlibrary(devtools)\nload_all(\".\")\n# Working directory should be in the package escher package workshop,\n# if you followed the settings with the project this should run.\n\nAfter you ran this code, the two functions we coded before are now read into R and we can use them to convert temperatures. Please try it out running to following code.\n\nconvert_Fahrenheid_to_Celsius(F_temp = 79)\n\n\nconvert_Celsius_to_Fahrenheid(C_temp = 29)\n\nAlthough we made a basic packages, this is not a good point to stop for writing a package, because we really should included some sort of documentation in which we explain where this package is design for and how users should use the functions. In other words, we need to provide guidance on how to use the it.\n\n\n\nIf we want others to use the functions that we have written, we need to provide some documentation for them. Documentation shows up in the ‘Help’ tab of RStudio when running the function help. You can run the following code to see what I mean.\n\nhelp(lm)\n\nThe code above, is the same as running.\n\n?lm\n\nIn the help tab from RStudio you know see the R Documentation about Fitting Linear Models a function that is part of the stats package.\n\nThese helpful markdown files can be made in Rstudio using the roxygen2 package. To do this, you need to add to add extra notation to the functions written in the convert_temperature_function.R file. The code below shows a simple example.\n\n#' Fahrenheit conversion\n#'\n#' Convert degrees Fahrenheit temperatures to degrees Celsius\n#' @param F_temp The temperature in degrees Fahrenheit\n#' @return The temperature in degrees Celsius\n#' @examples \n#' temp1 &lt;- F_to_C(50);\n#' temp2 &lt;- F_to_C( c(50, 63, 23) );\n#' @export\n\nconvert_Fahrenheid_to_Celsius &lt;- function(F_temp){\n    C_temp &lt;- (F_temp - 32) * 5/9;\n    return(C_temp);\n}\n\n\n#' Celsius conversion\n#'\n#' Convert degrees Celsius temperatures to degrees Fahrenheit\n#' @param C_temp The temperature in degrees Celsius\n#' @return The temperature in degrees Fahrenheit\n#' @examples \n#' temp1 &lt;- C_to_F(22);\n#' temp2 &lt;- C_to_F( c(-2, 12, 23) );\n#' @export\n\nconvert_Celsius_to_Fahrenheid &lt;- function(C_temp){\n    F_temp &lt;- (C_temp * 9/5) + 32;\n    return(F_temp);\n}\n\nIt is important to note that the length of the code has significantly increased due to the addition of documentation. However, this provides useful reminders on how to use each function. For example, the first line, such as #' Fahrenheit conversion, indicates the function’s title, while the following line provides a description. Additional tags like @param and @examples are utilized to structure different sections of the help file. These are just a few of the available tags; for a more comprehensive understanding of the Roxygen format, you can visit Karl Broman’s page or Hadley Wickham’s “Get started with roxygen” via this link.\nBy using this format, the roxygen2 package simplifies the creation of help files in markdown. To proceed, ensure that the project is open and the working directory is correctly set (using getwd() should return the directory of your R package).\nThen, run the following command in the console.\n\nlibrary(roxygen2) # Read in the roxygen2 R package\nroxygenise()      # Builds the help files\n\nroxygenise is the workhorse function that uses roclets, the built-in document transformation functions, to build all documentation for a package. For more information, you can read the documentation in the roxygen2 package.\nNote that there are two more things in the directory. The first is a folder called man, which holds the help files that we have written. The second is a plain text file NAMESPACE, which works with R to integrate them into the package correctly; you do not need to edit NAMESPACE manually, in fact, the file itself tells you not to edit it. \nInside the man folder, there are now new markdown documents, one for each function you add. \nBoth are plain text files. Here are the contents of convert_Celsius_to_Fahrenheid.Rd.\n\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/convert_temperature_function.R\n\\name{convert_Celsius_to_Fahrenheid}\n\\alias{convert_Celsius_to_Fahrenheid}\n\\title{Celsius conversion}\n\\usage{\nconvert_Celsius_to_Fahrenheid(C_temp)\n}\n\\arguments{\n\\item{C_temp}{The temperature in degrees Celsius}\n}\n\\value{\nThe temperature in degrees Fahrenheit\n}\n\\description{\nConvert degrees Celsius temperatures to degrees Fahrenheit\n}\n\\examples{\ntemp1 &lt;- C_to_F(22);\ntemp2 &lt;- C_to_F( c(-2, 12, 23) );\n}\n\nWe can now see if it works and ask for help with the convert_Celsius_to_Fahrenheid function.\n\n?convert_Celsius_to_Fahrenheid\n\nRstudio will present the following in the Help tab. \nNow that we have the key functions and documentation, we can upload this to GitHub for the world to see and use.\n\n\n\n\n\nNote that putting the R package on GitHub is not a requirement, but it is probably the easiest way to share your work if you have experience with GitHub.\n\n\n\nYou can also build a source package (i.e., a zipped version of the R package) in Rstudio by selecting Build &gt; Build Source Package. This will create a zipped package outside of the package directory, which would be what we would need to build if we wanted to submit our package to CRAN.\n\n\nYou can install a source package via Tools &gt; Install Packages, the following window will appear. \nSelect Package Archive and browse to the file. Next click Install.\n\n\n\n\n\nYou now have the basis knowledge to develop and share a package. Ready to develop your own? For now, you like to start small, add a dataset and just one or two extra functions to the package you have already created. Please make sure you create a new folder called data, to store your data files.\n\n\n\nPeer review is crucial for R packages because it ensures the quality and reliability of the code by having experts scrutinize the functionality and design before public release. This process helps identify and rectify errors, improve code efficiency, and enhance usability, which might otherwise be missed by the programmers. Peer review can also be useful to get feedback on coding standards and best practices and to robustness and maintainability of the package. While CRAN always requires this rigorous review process, it is also highly recommended to let your code be reviewed when hosted on GitHub. Therefore, we like you to practice this with our group and give and provide some feedback.\n\n\nIf you have published your package on GitHub, you can share the link with an other group to review the package. Please make sure you GitHub repository is public. Otherwise, you can upload your compressed file to the shared OneDrive folder: EsCHER R workshop April 2023).\nIn this folder, we also have an overview with suggested combination for peer review. Please install the package of the other, test it and provide some feedback.\n\n\nThis session is (originally) created for the EsCHER workshop: EsCHER’s R-evolution: Mastering R Package Development for Health Economics hosted at Erasmus School of Health Policy and Management on April 23rd.\nWe thank EsCHER for the funding for this workshop. More about EsCHER can be found here.\nFor text editing and spelling checks we made use of ChatGPT 4."
  },
  {
    "objectID": "workshop.html#lets-get-started",
    "href": "workshop.html#lets-get-started",
    "title": "R package workshop",
    "section": "",
    "text": "Do you want to go fast?\nGo alone!\nDo you want to go far?\nWork together!\n\nThe saying is true, especially with coding. However, the aim of developing a package is for your code to be used by others. Therefore, we really recommend that you work together. In the end, your code is more often read than written, and you had better make sure that your logic is also understood by others. So please, if you have not yet found a partner in crime at this stage, search for a buddy. Let us know if you need help.\nThe saying is true, and especially with coding. However, the aim of developing a package is that your code is used by others. Therefore, we really recommend you to work together. In the end your code is more often read than written and you better make sure that your logic is also understood by others. So please, if you have not found a partner in crime at this stage, search for a buddy. Let’s us know if you need help."
  },
  {
    "objectID": "workshop.html#making-a-new-r-project",
    "href": "workshop.html#making-a-new-r-project",
    "title": "R package workshop",
    "section": "",
    "text": "To get started with an R packages including documentation, it is best to create a new R project. To do this first open Rstudio. In Rstudio, go to File &gt; New Project...; the box below should show up."
  },
  {
    "objectID": "workshop.html#install-required-packages",
    "href": "workshop.html#install-required-packages",
    "title": "R package workshop",
    "section": "",
    "text": "Before we begin, we need to install the devtools and roxygen2 packages. Devtools includes a comprehensive set of tools essential for package development, and roxygen2 facilitates the creation of documentation. Copy the code below and paste in your console.\n\ninstall.packages(\"devtools\")\ninstall.packages(\"roxygen2\")\n\nYou might need to restart Rstudio after installing the above packages."
  },
  {
    "objectID": "workshop.html#why-are-we-making-an-r-package-what-is-it",
    "href": "workshop.html#why-are-we-making-an-r-package-what-is-it",
    "title": "R package workshop",
    "section": "",
    "text": "Packages in R are collections of code and data created by members of the R community. They serve a variety of purposes, ranging from comprehensive and widely used statistical libraries to simpler packages containing functions for knock-knock jokes (really, no joke).\nIf you have been using R for any amount of time, you likely have had to install and utilize functions from an R package. In these notes, we will guide you through the fundamentals of creating your own R package. This process will not only be useful if you plan to develop your own code into a package but will also enhance your understanding of the R packages you employ in your research and how they are constructed.\nMany R users are familiar with the (“Comprehensive R Archive Network” CRAN), which is a vast repository hosting over 13,000 published R packages. These packages are made available to the R community and can be installed in RStudio using the install.packages function. However, not every R package needs to be or should be uploaded to CRAN. Packages can also be uploaded to and downloaded from GitHub, or even constructed for personal use—many researchers maintain personal R packages with documented functions they regularly utilize in their research.\nIn this tutorial, we will take you through the steps to write a simple R package, explain how you can upload it to GitHub, and download it from GitHub. We will focus exclusively on package development in RStudio for simplicity and efficiency, although it is also possible to develop packages using the command line"
  },
  {
    "objectID": "workshop.html#the-most-basic-r-package",
    "href": "workshop.html#the-most-basic-r-package",
    "title": "R package workshop",
    "section": "",
    "text": "In this workshop we guide you through the steps of a very basic R package. After this, you are challenged to continue the development.\nThe R package template you created already came with a basis function. The hello function, which prints Hello, world!. This function, an .r script, lives in the R folder.\n\nClick on this R folder and you will see the hello.R script. We will ignore this script for now.\n\nInstead, we will create our own functions. The first function is to convert temperatures from degrees Fahrenheit to degrees Celsius, while the second function will convert temperatures from degrees Celsius to degrees Fahrenheit. To do so, we have to add an R script. You can click File &gt; New File &gt; R script.\n\nA file called Untitled1 opens. Click on the save button and give the R script a name."
  },
  {
    "objectID": "workshop.html#continue-building-the-package",
    "href": "workshop.html#continue-building-the-package",
    "title": "R package workshop",
    "section": "",
    "text": "Next, we will focus on the DESCRIPTION file that came with the template.\n As you see in the image, this file is in the main directory. It is a plain text document without any file extension and will contain metadata about the R package.\nThe example in the template looks comparable to this.\n As you see, there are many placeholder with general text. Please update this according, especially the title, authors, description.\nAt this state, we could call the current code a package. We could load it using the code below after first making sure we activated devtools.\n\nlibrary(devtools)\nload_all(\".\")\n# Working directory should be in the package escher package workshop,\n# if you followed the settings with the project this should run.\n\nAfter you ran this code, the two functions we coded before are now read into R and we can use them to convert temperatures. Please try it out running to following code.\n\nconvert_Fahrenheid_to_Celsius(F_temp = 79)\n\n\nconvert_Celsius_to_Fahrenheid(C_temp = 29)\n\nAlthough we made a basic packages, this is not a good point to stop for writing a package, because we really should included some sort of documentation in which we explain where this package is design for and how users should use the functions. In other words, we need to provide guidance on how to use the it."
  },
  {
    "objectID": "workshop.html#adding-documentation",
    "href": "workshop.html#adding-documentation",
    "title": "R package workshop",
    "section": "",
    "text": "If we want others to use the functions that we have written, we need to provide some documentation for them. Documentation shows up in the ‘Help’ tab of RStudio when running the function help. You can run the following code to see what I mean.\n\nhelp(lm)\n\nThe code above, is the same as running.\n\n?lm\n\nIn the help tab from RStudio you know see the R Documentation about Fitting Linear Models a function that is part of the stats package.\n\nThese helpful markdown files can be made in Rstudio using the roxygen2 package. To do this, you need to add to add extra notation to the functions written in the convert_temperature_function.R file. The code below shows a simple example.\n\n#' Fahrenheit conversion\n#'\n#' Convert degrees Fahrenheit temperatures to degrees Celsius\n#' @param F_temp The temperature in degrees Fahrenheit\n#' @return The temperature in degrees Celsius\n#' @examples \n#' temp1 &lt;- F_to_C(50);\n#' temp2 &lt;- F_to_C( c(50, 63, 23) );\n#' @export\n\nconvert_Fahrenheid_to_Celsius &lt;- function(F_temp){\n    C_temp &lt;- (F_temp - 32) * 5/9;\n    return(C_temp);\n}\n\n\n#' Celsius conversion\n#'\n#' Convert degrees Celsius temperatures to degrees Fahrenheit\n#' @param C_temp The temperature in degrees Celsius\n#' @return The temperature in degrees Fahrenheit\n#' @examples \n#' temp1 &lt;- C_to_F(22);\n#' temp2 &lt;- C_to_F( c(-2, 12, 23) );\n#' @export\n\nconvert_Celsius_to_Fahrenheid &lt;- function(C_temp){\n    F_temp &lt;- (C_temp * 9/5) + 32;\n    return(F_temp);\n}\n\nIt is important to note that the length of the code has significantly increased due to the addition of documentation. However, this provides useful reminders on how to use each function. For example, the first line, such as #' Fahrenheit conversion, indicates the function’s title, while the following line provides a description. Additional tags like @param and @examples are utilized to structure different sections of the help file. These are just a few of the available tags; for a more comprehensive understanding of the Roxygen format, you can visit Karl Broman’s page or Hadley Wickham’s “Get started with roxygen” via this link.\nBy using this format, the roxygen2 package simplifies the creation of help files in markdown. To proceed, ensure that the project is open and the working directory is correctly set (using getwd() should return the directory of your R package).\nThen, run the following command in the console.\n\nlibrary(roxygen2) # Read in the roxygen2 R package\nroxygenise()      # Builds the help files\n\nroxygenise is the workhorse function that uses roclets, the built-in document transformation functions, to build all documentation for a package. For more information, you can read the documentation in the roxygen2 package.\nNote that there are two more things in the directory. The first is a folder called man, which holds the help files that we have written. The second is a plain text file NAMESPACE, which works with R to integrate them into the package correctly; you do not need to edit NAMESPACE manually, in fact, the file itself tells you not to edit it. \nInside the man folder, there are now new markdown documents, one for each function you add. \nBoth are plain text files. Here are the contents of convert_Celsius_to_Fahrenheid.Rd.\n\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/convert_temperature_function.R\n\\name{convert_Celsius_to_Fahrenheid}\n\\alias{convert_Celsius_to_Fahrenheid}\n\\title{Celsius conversion}\n\\usage{\nconvert_Celsius_to_Fahrenheid(C_temp)\n}\n\\arguments{\n\\item{C_temp}{The temperature in degrees Celsius}\n}\n\\value{\nThe temperature in degrees Fahrenheit\n}\n\\description{\nConvert degrees Celsius temperatures to degrees Fahrenheit\n}\n\\examples{\ntemp1 &lt;- C_to_F(22);\ntemp2 &lt;- C_to_F( c(-2, 12, 23) );\n}\n\nWe can now see if it works and ask for help with the convert_Celsius_to_Fahrenheid function.\n\n?convert_Celsius_to_Fahrenheid\n\nRstudio will present the following in the Help tab. \nNow that we have the key functions and documentation, we can upload this to GitHub for the world to see and use."
  },
  {
    "objectID": "workshop.html#uploading-to-and-install-from-github.",
    "href": "workshop.html#uploading-to-and-install-from-github.",
    "title": "R package workshop",
    "section": "",
    "text": "Note that putting the R package on GitHub is not a requirement, but it is probably the easiest way to share your work.\nEsCHER workshop: if you are experiences with GitHub or your working computer restricts you from using it, you can also share your package via a .zipfile. Please read the section below about those instructions."
  },
  {
    "objectID": "workshop.html#develop-your-own-package",
    "href": "workshop.html#develop-your-own-package",
    "title": "R package workshop",
    "section": "",
    "text": "You now have the basis knowledge to develop a package. Ready to develop your own? For now, you might like to start small, and just add one or two extra functions to the package you have already created."
  },
  {
    "objectID": "workshop.html#peer-review",
    "href": "workshop.html#peer-review",
    "title": "R package workshop",
    "section": "",
    "text": "Peer review is crucial for R packages because it ensures the quality and reliability of the code by having experts scrutinize the functionality and design before public release. This process helps identify and rectify errors, improve code efficiency, and enhance usability, which might otherwise be missed by the programmers. Peer review can also be useful to get feedback on coding standards and best practices and to robustness and maintainability of the package. While CRAN always requires this rigorous review process, it is also highly recommended to let your code be reviewed when hosted on GitHub. Therefore, we like you to practice this with our group and give and provide some feedback.\n\n\nIf you have published your package on GitHub, you can share the link with an other group to review the package. Please make sure you GitHub repository is public. Otherwise, you can upload your compressed file to the shared OneDrive folder: EsCHER R workshop April 2023).\nIn this folder, we also have an overview with suggested combination for peer review. Please install the package of the other, test it and provide some feedback.\n\n\nThis session is (originally) created for the EsCHER workshop: EsCHER’s R-evolution: Mastering R Package Development for Health Economics hosted at Erasmus School of Health Policy and Management on April 23rd.\nWe thank EsCHER for the funding for this workshop. More about EsCHER can be found here.\nFor text editing and spelling checks we made use of ChatGPT 4."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EsCHER’s R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "Welcome to the workshop “Mastering R Package Development for Health Economics” with Gianluca Baio.\nIn this 1-day workshop, we will learn more about how to develop an R package for health economics and to what extend developing your own package can be be useful for your research.\n\n\n\nTo get most out of this workshop, we recommend you to read up on couple of things before you attend:\n\nIf you are not familiar with the basic syntax of R, we recommend you to read the Introduction to R from the R documentation.\nIf you want to read-up on anything related to Data Science and R, we recommend you to read R for Data Science (2e) by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\nIf you are not familiar with functions in R, we recommend you to read Chapter 6 Functions from the book Advanced R by Hadley Wickham.\n\n\n\n\nFor more details on the different aspects look at the pre-class tab!\n\n\nBefore you attend the workshop, please make sure you have the following things ready:\n\nR and RStudio: Make sure you have R and RStudio installed on your computer. You can download R from here and RStudio from here.\nThink about a case example that you would like to work during this workshop for developing an R package. It can be a simple example, but it should be something that you are familiar with and that you can use as a case study for the workshop. Please make sure that you ideas on writing some own functions for this case study. These could be functions that you already created or you come-up with new ones.\n\n\n\n\nThe following things are not mandatory, but they will make your life easier during the workshop. We are aware that the EUR IT-policy might not allow you to install these things on your computer easily, but we still recommend you to have them installed if you want to get most out of the workshop.\n\nR Packages: Make sure you have the following R packages installed: devtools, roxygen2, testthat, usethis\nGit: Make sure you have Git installed on your computer. You can download Git from here or the EUR software center.\nGitHub Account: Make sure you have a GitHub account. If you don’t have one, you can create one here. In any case, we strongly recommend to upgrade to a free teachers account to get free private repositories and other benefits such as GitHub Copilot. It takes some hurdles to get the teacher account, so we recommend you to start the process as soon as possible. It is worth it!\nInstall GitHub Desktop: GitHub Desktop is a graphical user interface for GitHub. You can download GitHub Desktop from here.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#welcome-to-eschers-r-evolution",
    "href": "index.html#welcome-to-eschers-r-evolution",
    "title": "EsCHER’s R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "Welcome to the workshop “Mastering R Package Development for Health Economics” with Gianluca Baio.\nIn this 1-day workshop, we will learn more about how to develop an R package for health economics and to what extend developing your own package can be be useful for your research.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-material",
    "href": "index.html#course-material",
    "title": "EsCHER’s R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "To get most out of this workshop, we recommend you to read up on couple of things before you attend:\n\nIf you are not familiar with the basic syntax of R, we recommend you to read the Introduction to R from the R documentation.\nIf you want to read-up on anything related to Data Science and R, we recommend you to read R for Data Science (2e) by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund.\nIf you are not familiar with functions in R, we recommend you to read Chapter 6 Functions from the book Advanced R by Hadley Wickham.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#pre-workshop-checklist",
    "href": "index.html#pre-workshop-checklist",
    "title": "EsCHER’s R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "For more details on the different aspects look at the pre-class tab!\n\n\nBefore you attend the workshop, please make sure you have the following things ready:\n\nR and RStudio: Make sure you have R and RStudio installed on your computer. You can download R from here and RStudio from here.\nThink about a case example that you would like to work during this workshop for developing an R package. It can be a simple example, but it should be something that you are familiar with and that you can use as a case study for the workshop. Please make sure that you ideas on writing some own functions for this case study. These could be functions that you already created or you come-up with new ones.\n\n\n\n\nThe following things are not mandatory, but they will make your life easier during the workshop. We are aware that the EUR IT-policy might not allow you to install these things on your computer easily, but we still recommend you to have them installed if you want to get most out of the workshop.\n\nR Packages: Make sure you have the following R packages installed: devtools, roxygen2, testthat, usethis\nGit: Make sure you have Git installed on your computer. You can download Git from here or the EUR software center.\nGitHub Account: Make sure you have a GitHub account. If you don’t have one, you can create one here. In any case, we strongly recommend to upgrade to a free teachers account to get free private repositories and other benefits such as GitHub Copilot. It takes some hurdles to get the teacher account, so we recommend you to start the process as soon as possible. It is worth it!\nInstall GitHub Desktop: GitHub Desktop is a graphical user interface for GitHub. You can download GitHub Desktop from here.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "course_material/starwars/starwars_example.html#next-steps",
    "href": "course_material/starwars/starwars_example.html#next-steps",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Next steps",
    "text": "Next steps\nUse the provided dataset (here) and at least one of these functions to build your own mini-package.\nRemember that to provide a meaningful documentation for your functions which should include:\n\na description of the function,\nthe input parameters,\nthe output,\nand an example of usage."
  },
  {
    "objectID": "course_material/penguins/penguins_example.html",
    "href": "course_material/penguins/penguins_example.html",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "This section covers the basics of handling and analyzing the palmerpenguins dataset. You can use these example functions and dataset to create and use custom functions to explore this dataset for your mini-package."
  },
  {
    "objectID": "course_material/penguins/penguins_example.html#introduction",
    "href": "course_material/penguins/penguins_example.html#introduction",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "",
    "text": "This section covers the basics of handling and analyzing the palmerpenguins dataset. You can use these example functions and dataset to create and use custom functions to explore this dataset for your mini-package."
  },
  {
    "objectID": "course_material/penguins/penguins_example.html#the-palmer-penguins-dataset",
    "href": "course_material/penguins/penguins_example.html#the-palmer-penguins-dataset",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "The Palmer Penguins Dataset",
    "text": "The Palmer Penguins Dataset\n\nIs a relatively new dataset that contains information about penguins and is accessible through the palmerpenguins package.\nIncludes data about penguin species collected from Palmer Station, Antarctica.\nVariables include: species, island, bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, sex, and year.\nThe dataset is clean and requires minimal preprocessing for analysis.\nDownload it here"
  },
  {
    "objectID": "course_material/penguins/penguins_example.html#function-penguin_summary",
    "href": "course_material/penguins/penguins_example.html#function-penguin_summary",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Function: penguin_summary",
    "text": "Function: penguin_summary\n\n\n\nPurpose\nReturns a data frame with summary statistics. Useful for quickly summarising penguins by attributes like flipper length or body mass.\n\n\n\n\n\n\nCode\n\n# Function to calculate summary statistics for a specified numeric variable by species\nsummarize_species &lt;- function(data, variable) {\n        \n        require(dplyr)\n        \n        data %&gt;%\n                group_by(species) %&gt;%\n                summarise(\n                        Count = n(),\n                        Mean = mean({{variable}}, na.rm = TRUE),\n                        SD = sd({{variable}}, na.rm = TRUE),\n                        Min = min({{variable}}, na.rm = TRUE),\n                        Max = max({{variable}}, na.rm = TRUE)\n                ) %&gt;%\n                ungroup()\n}\n\n# Example usage:\n# summarize_species(data = palmerpenguins::penguins,\n#                  variable = flipper_length_mm)"
  },
  {
    "objectID": "course_material/penguins/penguins_example.html#function-penguin_plot",
    "href": "course_material/penguins/penguins_example.html#function-penguin_plot",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Function: penguin_plot",
    "text": "Function: penguin_plot\n\n\n\n\n\nPurpose\nPlots a histogram of the selected attribute for each of the palmerpenguins species.\n\n\n\n\nCode\n\n# Function to create a histogram for each species based on a specified numeric variable\nplot_species_distribution &lt;- function(data, variable_name) {\n        \n        require(ggplot2)\n        \n        ggplot(data, aes_string(x = variable_name, fill = \"species\")) +\n                geom_histogram(bins = 30, alpha = 0.6, position = \"identity\") +\n                facet_wrap(~species, scales = \"free_y\") +\n                labs(title = paste(\"Distribution of\", variable_name, \"by Species\"),\n                     x = variable_name,\n                     y = \"Frequency\") +\n                theme_minimal()\n}\n\n# Example usage:\n# Plot the distribution of 'body_mass_g' for each penguin species\n# plot_species_distribution(palmerpenguins::penguins, \"body_mass_g\")"
  },
  {
    "objectID": "course_material/penguins/penguins_example.html#next-steps",
    "href": "course_material/penguins/penguins_example.html#next-steps",
    "title": "EsCHER's R-evolution: Mastering R Package Development for Health Economics",
    "section": "Next steps",
    "text": "Next steps\nUse the provided dataset here and at least one of these functions to build your own mini-package.\nRemember that to provide meaningful documentation for your functions, which should include:\n\na description of the function,\nthe input parameters,\nthe output,\nand an example of usage."
  },
  {
    "objectID": "presentation.html#about-escher",
    "href": "presentation.html#about-escher",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "About EsCHER",
    "text": "About EsCHER\nErasmus Centre for Health Economics Rotterdam (EsCHER) is:\n\npart of Erasmus University Rotterdam\nconsolidates unique and leading expertise in health economics\nwith over 100 health economists and health economic researchers\n\nWe thank EsCHER for the funding of this day."
  },
  {
    "objectID": "presentation.html#about-us",
    "href": "presentation.html#about-us",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "About us",
    "text": "About us\nEline Krijkamp\n\n2022 - now: Postdoc researcher @ESHPM 💻\n2018 - 2022: PhD student @Erasmus Medical Center 🎓\n2017 - 2020: Educational innovation team @NIHES 📚🏫\n2014 - 2016: MSc (res) Health Sciences @NIHES 🎓\n2013 - 2015: MSc Health Economics Policy and Law @ESHPM \n2010 - 2013: BSc Health Sciences and Biomedical Sciences @VU University Amsterdam  🎓"
  },
  {
    "objectID": "presentation.html#about-us-1",
    "href": "presentation.html#about-us-1",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "About us",
    "text": "About us\nFrederick Thielen\n\n2021 - now: Assistant professor @ESHPM 🎓\n2023 - now: Senior researcher @Trimbos 💻\n2015 - 2020: PhD student @ESHPM 🎓\n2013 - 2015: MSc (res) Health Sciences @Maastricht University 🎓\n2010 - 2013: BSc European Public Health @Maastricht University 🎓\n2009 - 2009: Nurse @University Medical Center Aachen 🩺"
  },
  {
    "objectID": "presentation.html#why-are-we-here-today",
    "href": "presentation.html#why-are-we-here-today",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Why are we here today?",
    "text": "Why are we here today?\n\n\nEline\n\nMiss working with R a lot\nAmbition to integrate R more on the ESHPM department\nKeep up with the newest R features\nInspire others to work with R\n\n\nFrederick\n\nUsing R daily\nNo formal data science education and mostly self-taught\nWant to learn new advanced R-skills"
  },
  {
    "objectID": "presentation.html#eline",
    "href": "presentation.html#eline",
    "title": "👋 Welcome to EsCHER’s R-evolution: Mastering R Package Development for Health Economics workshop",
    "section": "### Eline",
    "text": "### Eline"
  },
  {
    "objectID": "presentation.html#our-day",
    "href": "presentation.html#our-day",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "☀️ Our day",
    "text": "☀️ Our day\n\n\n\n\nTime\nTitle\nLocation\n\n\n\n\n09:30 - 10:00\n☕️ Arrival & Coffee\nOpen space on the 7th floor\n\n\n10:00 - 10:30\n👋 Welcome & Introduction\nJ7-55\n\n\n10:30 - 11:45\n🎤 Keynote by Gianluca Baio\nJ7-55\n\n\n11:45 - 12:30\n🥗 Lunch\nOpen space on the 7th floor\n\n\n12:30 - 14:45\n💻 Coding exercise: build your own package\nJ7-43, J7-45, J7-47\n\n\n14:45 - 16:00\n🧊 Drinks\nOpen space on the 7th floor"
  },
  {
    "objectID": "presentation.html#step-by-step-guide",
    "href": "presentation.html#step-by-step-guide",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Step-by-step guide",
    "text": "Step-by-step guide\n\n💻 Create a new package with your group  (12:30 - 13:30)\n\n\n\n📣 Make your package publicly available through GitHub  (13:30 - 14:00)\n⬇️ Download & install a package from another group to test it  (14:00 - 14:30)\n📝 Write a short review on the package you tested  (14:30 - 14:45)"
  },
  {
    "objectID": "presentation.html#part-1",
    "href": "presentation.html#part-1",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Part 1",
    "text": "Part 1\n12:30 - 13:30\nCreate a new package with your group:\n\ndecide on a package name\nselect or write at least one dataset and one function you want to include\nmake sure to document everything properly"
  },
  {
    "objectID": "presentation.html#part-2",
    "href": "presentation.html#part-2",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Part 2",
    "text": "Part 2\n13:30 - 14:00\nShare your package with the world:\n\nupload your package to GitHub\nadd the GitHub link to the overview on OneDrive\nmake sure to include a README file\n\nIf you don’t use GitHub, you can save your package in the OneDrive folder"
  },
  {
    "objectID": "presentation.html#part-3",
    "href": "presentation.html#part-3",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Part 3",
    "text": "Part 3\n14:00 - 14:30\nDownload and install a package from another group: see schedulde in OneDrive\n\ntest the package\ndoes the documentation make sense?"
  },
  {
    "objectID": "presentation.html#part-4",
    "href": "presentation.html#part-4",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Part 4",
    "text": "Part 4\n14:30 - 14:45\nWrite a short review on the package you tested:\n\nwhat did you like?\nwhat could be improved?"
  },
  {
    "objectID": "presentation.html#course-content",
    "href": "presentation.html#course-content",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "🛜 Course content",
    "text": "🛜 Course content\nGet all course content on bit.ly/escher-package\n\nNeed internet?\n\nSMS eur96 to telephone number 06-35250006.\nYou will receive a login name and password for the entire day by SMS."
  },
  {
    "objectID": "presentation.html#need-internet",
    "href": "presentation.html#need-internet",
    "title": "👋 Welcome to EsCHER’s R-evolution: Mastering R Package Development for Health Economics workshop",
    "section": "Need internet?",
    "text": "Need internet?\n\nSMS eur96 to telephone number 06-35250006.\nYou will receive a login name and password for the entire day by SMS."
  },
  {
    "objectID": "presentation.html#why-are-you-here-today",
    "href": "presentation.html#why-are-you-here-today",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Why are you here today? 🫵",
    "text": "Why are you here today? 🫵\nIntroduce yourself on paper\n\n\n\nOn a post-it, write down:\n\nYour name\nYour background & current occupation\nOne hobby\nWhat you hope to get out of this course\n\nGive the post-it to the person next to you"
  },
  {
    "objectID": "presentation.html#why-are-they-here-today",
    "href": "presentation.html#why-are-they-here-today",
    "title": "👋 Welcome to EsCHER’s R-evolution",
    "section": "Why are they here today? 👉",
    "text": "Why are they here today? 👉\nMix and gossip positively\n\n\n\n📣 Introduce the person next to you to someone else and 🔄 exchange the post-it\n\n\n(4. 📣 Introduce the person to the group)"
  },
  {
    "objectID": "workshop.html#section",
    "href": "workshop.html#section",
    "title": "R package workshop",
    "section": "",
    "text": "Select the option New Directory. The following box should appear."
  },
  {
    "objectID": "workshop.html#section-1",
    "href": "workshop.html#section-1",
    "title": "R package workshop",
    "section": "",
    "text": "Select the option R Package\n\n\n\n\n\n\n\nThe following box should appear.\n\n\n\n\n\n\nNow give your package a name. This should be one word. In this example, I use eschereventpackage.\nNext, create a directory for building this package. Browse on your computer for a good place for this R package to live. And click on Create Project.\nYou will now find this folder and R project on the location you set the directory. Quite likely, the project did even open in R studio. You will notice this by having the Directory Name in your right top corner of R studio.\n Within the folder, the R project is shown as a file ending with .Rproj . You also see more files and folders generated by the template and an R script called hello.R. We will talk about each of these files in the sections below.\n\n\n\n\n\n\nExtra information\n\n\n\n\n\nThere are also two hidden file, likely called .Rproj.user and .Rbuildignore. You will not see it unless you ask your computer to show it. On a Mac you can see this by going to the folder and click “Command + shift + . (period key)”. The* folder .Rproj.user is not really important; it stores some more meta-data about the package development. The .Rbuildignore file plays a role in specifying which files and directories should be ignored when building the package. We might get back to this later during the development."
  },
  {
    "objectID": "workshop.html#section-2",
    "href": "workshop.html#section-2",
    "title": "R package workshop",
    "section": "",
    "text": "Give your R script a name, select the R folder as the location for the file and click Save. This R folder is the folder where you will store actual R scripts with the coded functions."
  },
  {
    "objectID": "workshop.html#section-3",
    "href": "workshop.html#section-3",
    "title": "R package workshop",
    "section": "",
    "text": "In your R repository environment you should now see the file within the R folder.\n\nWithin this folder you can save as many R scripts, .R files, as you like. And each of these .R. files can have as any functions you want. You could, for example, give each function its own file, but for large projects, you might like to group similar functions in the same .R file.\nIn our R package, we will write both functions in the same file called convert_temperature_function.R. Paste the code from below in the file and click save.\n\nconvert_Fahrenheid_to_Celsius &lt;- function(F_temp){\n    C_temp &lt;- (F_temp - 32) * 5/9;\n    return(C_temp);\n}\n\nconvert_Celsius_to_Fahrenheid &lt;- function(C_temp){\n    F_temp &lt;- (C_temp * 9/5) + 32;\n    return(F_temp);\n}\n\n\n\nCoding conventions in R are essential for maintaining readable, efficient, and consistent code across projects. One well-known standard is the Google’s R Style Guide, which emphasizes clarity and simplicity with rules on naming conventions, syntax, and data structure usage. Similarly, the Tidyverse style guide, used primarily for packages within the Tidyverse collection, focuses on making R code easy to write, read, and maintain, highlighting functional programming and data manipulation tasks. Another example is the Decision Analysis in R for Technologies in Health, DARTH framework, which provides guidelines for naming conventions of health economic models.\nOverall, all these guides aim to facilitate the sharing and readability of code. This is key when building a package which will be used by others. Therefore, we like to stress to use good coding practices along the way."
  },
  {
    "objectID": "workshop.html#share-your-package-with-other",
    "href": "workshop.html#share-your-package-with-other",
    "title": "R package workshop",
    "section": "",
    "text": "Note that putting the R package on GitHub is not a requirement, but it is probably the easiest way to share your work if you have experience with GitHub.\n\n\n\nYou can also build a source package (i.e., a zipped version of the R package) in Rstudio by selecting Build &gt; Build Source Package. This will create a zipped package outside of the package directory, which would be what we would need to build if we wanted to submit our package to CRAN.\n\n\nYou can install a source package via Tools &gt; Install Packages, the following window will appear. \nSelect Package Archive and browse to the file. Next click Install."
  },
  {
    "objectID": "workshop.html#personalize-create-your-own-package",
    "href": "workshop.html#personalize-create-your-own-package",
    "title": "R package workshop",
    "section": "",
    "text": "You now have the basis knowledge to develop and share a package. Ready to develop your own? For now, you like to start small, add a dataset and just one or two extra functions to the package you have already created. Please make sure you create a new folder called data, to store your data files."
  }
]